---
- name: Combine proxmox_master and proxmox_nodes into a single list for CephFS
  ansible.builtin.set_fact:
    all_proxmox_nodes: "{{ groups['proxmox_master'] | default([]) + groups['proxmox_nodes'] | default([]) }}"
  when: is_master

##########################################################################
# 1. PVE Nag-Buster Installation Tasks
##########################################################################
- name: Check if pve-nag-buster script is installed
  ansible.builtin.stat:
    path: /usr/share/pve-nag-buster.sh
  register: pve_nag_buster_file

- name: Download the PVE nag-buster install script
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/foundObjects/pve-nag-buster/master/install.sh"
    dest: "/tmp/install.sh"
    mode: '0755'
  when: not pve_nag_buster_file.stat.exists

- name: Run the nag-buster install script
  ansible.builtin.command: "/tmp/install.sh"
  args:
    chdir: "/tmp"
    creates: /usr/share/pve-nag-buster.sh
  when: not pve_nag_buster_file.stat.exists

##########################################################################
# 2. Proxmox Cluster Setup Tasks
##########################################################################
- name: Check if node is part of an existing Proxmox cluster
  ansible.builtin.command: pvecm status
  register: pvecm_status
  ignore_errors: true
  changed_when: false

- name: Set fact if node is not in a cluster
  ansible.builtin.set_fact:
    not_in_cluster: "{{ 'does not exist' in pvecm_status.stderr }}"

- name: Create cluster on the master node if not in a cluster
  ansible.builtin.command: "pvecm create {{ cluster_name }}"
  when:
    - is_master
    - not_in_cluster
  register: create_cluster
  changed_when: create_cluster.rc == 0

- name: Use expect to provide password and confirm SSH connection for pvecm add
  ansible.builtin.expect:
    command: "pvecm add {{ master_ip }}"
    responses:
      "^Please enter superuser \\(root\\) password for '.*':\\s*": "{{ proxmox_password }}"
      "Are you sure you want to continue connecting \\(yes/no\\)\\?": "yes"
    timeout: 200
  when:
    - "'proxmox_nodes' in group_names or 'proxmox_master' in group_names"
    - not is_master
    - not_in_cluster

- name: Reboot node after Proxmox configuration if not in cluster
  ansible.builtin.reboot:
    reboot_timeout: 300
  when: not_in_cluster

- name: Ensure ifupdown2 is installed (for networking reload)
  ansible.builtin.apt:
    name: ifupdown2
    state: present
  when: ansible_os_family == "Debian"

- name: Deploy /etc/network/interfaces from template
  ansible.builtin.template:
    src: ../files/interfaces.j2
    dest: /etc/network/interfaces
    mode: '0755'
    backup: true
  notify:
    - Restart networking

##########################################################################
# Proxmox HA Group Creation by Checking /etc/pve/ha/groups.cfg
##########################################################################
- name: Check if /etc/pve/ha/groups.cfg exists
  ansible.builtin.stat:
    path: /etc/pve/ha/groups.cfg
  register: ha_groups_file
  changed_when: false
  failed_when: false
  when: is_master

- name: Check if 'proxmox_ha_group' is already defined in groups.cfg
  ansible.builtin.shell: "grep -q '^group: proxmox_ha_group$' /etc/pve/ha/groups.cfg"
  register: group_check
  changed_when: false
  failed_when: false
  when:
    - is_master
    - ha_groups_file.stat.exists

- name: Create a Proxmox HA group if missing
  ansible.builtin.command: "ha-manager groupadd proxmox_ha_group --nodes {{ all_proxmox_nodes | join(',') }}"
  when:
    - is_master
    - ha_groups_file.stat.exists
    - group_check.rc != 0
  register: create_ha_group
  changed_when: create_ha_group.rc == 0


##########################################################################
# Create storage volumes
##########################################################################

# pvesm add lvm local-lvm
- name: Check if local_lvm already created
  ansible.builtin.shell: |
    grep -q '^lvm: local_lvm' /etc/pve/storage.cfg && echo "exists" || echo "not_exists"
  register: local_lvm_check_result
  changed_when: false
  when: is_master

- name: Configure lvm storage for local_lvm in Proxmox
  ansible.builtin.command: >
    pvesm add lvm local_lvm
    --vgname pve
    --content rootdir,images
  when: is_master and local_lvm_check_result.stdout == "not_exists"
  register: local_lvm_add_result
  failed_when: >
    local_lvm_add_result.rc != 0 and
    ('already defined' not in local_lvm_add_result.stderr.lower())
  changed_when: >
    local_lvm_add_result.rc == 0 and
    ('already defined' not in local_lvm_add_result.stderr.lower())

- name: Confirm lvm storage for local_lvm in Proxmox
  ansible.builtin.shell: |
    grep -q '^lvm: local_lvm' /etc/pve/storage.cfg && echo "found" || echo "not found"
  register: local_lvm_confirm
  changed_when: false
  when: is_master

# nfs: nfs_data
- name: Check if NFS storage block for /mnt/data is already defined in Proxmox
  ansible.builtin.shell: |
    grep -q '^nfs: nfs_data' /etc/pve/storage.cfg && echo "exists" || echo "not_exists"
  register: nfs_data_check_result
  changed_when: false
  when: is_master

- name: Configure NFS storage for /mnt/data in Proxmox
  ansible.builtin.command: >
    pvesm add nfs nfs_data
    --server {{ nfs_server_ip }}
    --export /mnt/data
    --options vers=3
    --content rootdir,backup,snippets,images,vztmpl,import,iso
  when: is_master and nfs_data_check_result.stdout == "not_exists"
  register: nfs_data_add_result
  failed_when: >
    nfs_data_add_result.rc != 0 and
    ('already defined' not in nfs_data_add_result.stderr.lower())
  changed_when: >
    nfs_data_add_result.rc == 0 and
    ('already defined' not in nfs_data_add_result.stderr.lower())

- name: Confirm NFS storage block for /mnt/data exists in /etc/pve/storage.cfg
  ansible.builtin.shell: |
    grep -q '^nfs: nfs_data' /etc/pve/storage.cfg && echo "found" || echo "not found"
  register: nfs_data_confirm
  changed_when: false
  when: is_master

# nfs: nfs_plex
- name: Check if NFS storage block for /mnt/plex is already defined in Proxmox
  ansible.builtin.shell: |
    grep -q '^nfs: nfs_plex' /etc/pve/storage.cfg && echo "exists" || echo "not_exists"
  register: nfs_plex_check_result
  changed_when: false
  when: is_master

- name: Configure NFS storage for /mnt/plex in Proxmox
  ansible.builtin.command: >
    pvesm add nfs nfs_plex
    --server {{ nfs_server_ip }}
    --export /mnt/plex
    --options vers=3
    --content rootdir
  when: is_master and nfs_plex_check_result.stdout == "not_exists"
  register: nfs_plex_add_result
  failed_when: >
    nfs_plex_add_result.rc != 0 and
    ('already defined' not in nfs_plex_add_result.stderr.lower())
  changed_when: >
    nfs_plex_add_result.rc == 0 and
    ('already defined' not in nfs_plex_add_result.stderr.lower())

- name: Confirm NFS storage block for /mnt/plex exists in /etc/pve/storage.cfg
  ansible.builtin.shell: |
    grep -q '^nfs: nfs_plex' /etc/pve/storage.cfg && echo "found" || echo "not found"
  register: nfs_plex_confirm
  changed_when: false
  when: is_master


##########################################################################
# HA Pool Configuration for VMs
##########################################################################
- name: Check if Proxmox pool "vm_backup_pool" exists
  ansible.builtin.shell: "grep -q '^pool: vm_backup_pool$' /etc/pve/pools.cfg"
  register: pool_check
  changed_when: false
  failed_when: false
  when: is_master

- name: Create Proxmox pool "vm_backup_pool" for VM backups if not exists
  ansible.builtin.command: >
    pvesh create /pools --poolid vm_backup_pool --comment "Pool for VM backups"
  when: is_master and pool_check.rc != 0
  register: create_pool
  failed_when: create_pool.rc != 0 and ("already exists" not in (create_pool.stderr | string))
  changed_when: create_pool.rc == 0

##########################################################################
# VM Backup Job
##########################################################################
- name: Get current Proxmox backup jobs
  ansible.builtin.command: "pvesh get /cluster/backup/jobs"
  register: current_backup_jobs
  changed_when: false
  failed_when: false
  when: is_master

- name: Create Proxmox backup job for pool "vm_backup_pool" if not exists
  ansible.builtin.command: >
    pvesh create /cluster/backup --schedule '*-*-* 11:00:00' --pool vm_backup_pool --storage nfs_data --maxfiles 2 --enabled 1
  when: is_master and ("vm_backup_pool" not in current_backup_jobs.stdout)
  register: create_backup_job
  changed_when: create_backup_job.rc == 0

##########################################################################
# vGPU driver install
##########################################################################
# Update the apt cache
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 600
  notify: Reboot the host

# Ensure kernel version is 6.1 or newer
- name: Ensure kernel version is 6.1 or newer
  ansible.builtin.assert:
    that:
      - ansible_kernel is version('6.1', '>=')
    fail_msg: "Kernel version is too old. Please update to version 6.1 or newer."

# Install pve-headers for current kernel
- name: Install pve-headers for current kernel
  ansible.builtin.apt:
    name: "pve-headers-{{ ansible_kernel }}"
    state: present
  notify: Reboot the host

# Install git, mokutil, sysfsutils, and dkms
- name: Install git, mokutil, sysfsutils, and dkms
  ansible.builtin.apt:
    name:
      - git
      - mokutil
      - sysfsutils
      - dkms
    state: present
  notify: Reboot the host

- name: Check if local i915-sriov-dkms repo exists
  ansible.builtin.stat:
    path: "/root/i915-sriov-dkms/.git"
  register: i915_repo_stat
  tags: check_commit

- name: Get the current commit of local i915-sriov-dkms repo
  ansible.builtin.command: git rev-parse HEAD
  args:
    chdir: "/root/i915-sriov-dkms"
  register: i915_current_commit
  changed_when: false
  when: i915_repo_stat.stat.exists
  tags: check_commit

- name: Determine if the local repo matches the desired commit
  ansible.builtin.set_fact:
    correct_commit: "{{ i915_current_commit.stdout == i915_desired_commit }}"
  when: i915_repo_stat.stat.exists
  tags: check_commit

- name: Remove existing i915-sriov-dkms modules and directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ lookup('fileglob', '/var/lib/dkms/i915-sriov-dkms*', wantlist=True) +
           lookup('fileglob', '/usr/src/i915-sriov-dkms*', wantlist=True) +
           ['/root/i915-sriov-dkms'] }}"
  when: not correct_commit | default(false)
  tags: remove_dkms

- name: Clone the DKMS repository at specific commit
  ansible.builtin.git:
    repo: "https://github.com/strongtz/i915-sriov-dkms.git"
    dest: "/root/i915-sriov-dkms"
    version: "{{ i915_desired_commit }}"
    force: false
    update: true
  when: not correct_commit | default(false)
  notify: Reboot the host
  tags: clone_dkms

- name: Backup dkms.conf
  ansible.builtin.copy:
    src: "/root/i915-sriov-dkms/dkms.conf"
    dest: "/root/i915-sriov-dkms/dkms.conf.bak"
    mode: '0655'
    remote_src: true
    backup: false
  when: not correct_commit | default(false)
  notify: Reboot the host
  tags: backup_dkms_conf

# Add DKMS module
- name: Add DKMS module
  ansible.builtin.command: dkms add .
  args:
    chdir: "/root/i915-sriov-dkms"
  register: dkms_add_output
  changed_when: "'Added' in dkms_add_output.stdout"
  failed_when: dkms_add_output.rc != 0 and "already contains" not in dkms_add_output.stderr.lower()
  notify: Reboot the host
  tags: add_dkms

# Remove parallel make jobs from dkms.conf
- name: Remove parallel make jobs from dkms.conf
  ansible.builtin.replace:
    path: "/root/i915-sriov-dkms/dkms.conf"
    regexp: ' -j\$\((nproc)\)'
    replace: ''
  notify: Reboot the host

# Extract DKMS package version
- name: Extract DKMS package version
  ansible.builtin.shell: |
    set -o pipefail
    grep 'PACKAGE_VERSION=' /root/i915-sriov-dkms/dkms.conf | awk -F '=' '{print $2}' | tr -d '"'
  args:
    executable: /bin/bash
  register: dkms_version
  changed_when: false


# Display dkms.conf for verification
- name: Display dkms.conf
  ansible.builtin.command: cat /root/i915-sriov-dkms/dkms.conf
  register: dkms_conf_content
  changed_when: false

# Reinstall dkms package
- name: Reinstall dkms package
  ansible.builtin.apt:
    name: dkms
    state: present
  notify: Reboot the host

# Add DKMS module
- name: Add DKMS module
  ansible.builtin.command: dkms add .
  args:
    chdir: "/root/i915-sriov-dkms"
  register: dkms_add_output
  changed_when: "'Added' in dkms_add_output.stdout"
  failed_when: dkms_add_output.rc != 0 and 'already contains' not in dkms_add_output.stderr

# Verify DKMS status after adding
- name: Verify DKMS status after adding
  ansible.builtin.command: dkms status
  register: dkms_status_after_add
  changed_when: false

- name: Show DKMS status after adding
  ansible.builtin.debug:
    msg: "{{ dkms_status_after_add.stdout }}"

# Install i915-sriov-dkms module
- name: Install i915-sriov-dkms module
  ansible.builtin.command: dkms install -m i915-sriov-dkms -v "{{ dkms_version.stdout }}" -k "{{ ansible_kernel }}" --force -j 1
  args:
    chdir: "/root/i915-sriov-dkms"
  register: dkms_install_output
  changed_when: "'install completed successfully' in dkms_install_output.stdout"
  notify: Reboot the host

# Verify DKMS status after installation
- name: Verify DKMS status after installation
  ansible.builtin.command: dkms status
  register: dkms_status_after_install
  changed_when: false

- name: Show DKMS status after installation
  ansible.builtin.debug:
    msg: "{{ dkms_status_after_install.stdout }}"

# Backup existing GRUB configuration
- name: Backup existing GRUB configuration
  ansible.builtin.copy:
    src: "/etc/default/grub"
    dest: "/etc/default/grub.bak"
    mode: '0655'
    remote_src: true
    backup: true
  notify: Reboot the host

# Update GRUB_CMDLINE_LINUX_DEFAULT in GRUB configuration
- name: Update GRUB_CMDLINE_LINUX_DEFAULT in GRUB configuration
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on iommu=pt i915.enable_guc=3 i915.max_vfs=7"'
    backup: true
  notify: Reboot the host

# Update GRUB
- name: Update GRUB
  ansible.builtin.command: update-grub
  register: grub_update_output
  changed_when: grub_update_output.rc == 0 and "'Updating GRUB configuration'" in grub_update_output.stdout
  notify: Reboot the host

# Update initramfs for all kernels
- name: Update initramfs for all kernels
  ansible.builtin.command: update-initramfs -u -k all
  register: initramfs_update_output
  changed_when: "'updating initramfs' in initramfs_update_output.stdout.lower()"
  notify: Reboot the host

# Create or update sysfs.conf with vGPU settings
- name: Create or update sysfs.conf with vGPU settings
  ansible.builtin.lineinfile:
    path: "/etc/sysfs.conf"
    regexp: '^devices/pci0000:00/0000:00:02.0/sriov_numvfs\s*='
    line: "devices/pci0000:00/0000:00:02.0/sriov_numvfs = 7"
    mode: "0655"
    create: true
  notify: Reboot the host

# Display sysfs.conf for verification
- name: Display sysfs.conf
  ansible.builtin.command: cat /etc/sysfs.conf
  register: sysfs_conf_content
  changed_when: false

- name: Show sysfs.conf content
  ansible.builtin.debug:
    msg: "{{ sysfs_conf_content.stdout }}"

# Verify vGPU setup after reboot
- name: Verify vGPU setup after reboot
  ansible.builtin.shell: |
    set -o pipefail
    lspci | grep VGA
    dmesg | grep i915
  args:
    executable: /bin/bash
  register: vgpu_verification
  changed_when: false
