- name: Gather package facts via APT
  ansible.builtin.package_facts:
    manager: apt

- name: Determine if Ceph is already installed
  ansible.builtin.set_fact:
    ceph_installed: "{{ ('ceph' in ansible_facts.packages) or ('ceph-mon' in ansible_facts.packages) or ('ceph-osd' in ansible_facts.packages) }}"

- name: Ensure Ceph is installed on the node only if not installed
  ansible.builtin.expect:
    command: "pveceph install --version squid --repository no-subscription"
    responses:
      "^.*Do you want to continue.*\\[Y/n\\].*$": "Y\n"
    timeout: 200
  when: not ceph_installed

- name: Initialize Ceph configuration using pveceph init (master only)
  ansible.builtin.command: pveceph init --network {{ ansible_host }}/24
  args:
    creates: /etc/pve/ceph.conf
  when: is_master
  register: ceph_init_result

- name: Create Ceph Monitor on node using dedicated IP
  ansible.builtin.command: pveceph createmon --mon-address {{ ansible_host }}
  args:
    creates: /var/lib/ceph/mon/ceph-{{ inventory_hostname }}
  register: createmon_result

- name: Create Ceph Manager on node
  ansible.builtin.command: pveceph createmgr
  args:
    creates: /var/lib/ceph/mgr/ceph-{{ inventory_hostname }}
  register: createmgr_result

- name: Check if OSD directories exist
  ansible.builtin.find:
    paths: "/var/lib/ceph/osd"
    patterns: "ceph-*"
    file_type: directory
  register: osd_dirs
  changed_when: false
  when: ceph_installed

- name: Create OSD on this node (only if no existing OSD folder)
  ansible.builtin.command: "pveceph createosd {{ proxmox_ceph_disk }}"
  when:
    - ceph_installed
    - osd_dirs.matched == 0
  register: createosd_result
  changed_when: createosd_result.rc == 0

- name: Check which pools currently exist
  ansible.builtin.command: "pveceph pool ls"
  register: existing_pools
  changed_when: false
  failed_when: false
  when: is_master

- name: Create a Ceph pool named 'rbd' (size=3, min_size=2, pg_num=32)
  ansible.builtin.command: "pveceph pool create rbd --pg_num 32 --size 3 --min_size 2"
  when:
    - is_master
    - "'rbd' not in existing_pools.stdout"
  register: create_pool_result
  changed_when: create_pool_result.rc == 0

- name: Create Ceph Metadata Server on node
  ansible.builtin.command: pveceph mds create
  args:
    creates: /var/lib/ceph/mds/ceph-{{ inventory_hostname }}
  register: createmds_result

- name: Create Ceph filesystem
  ansible.builtin.command: >
    pveceph fs create --add-storage true --name cephfs --pg_num 128
  when: is_master
  args:
    creates: /var/lib/ceph/fs/cephfs
  register: create_cephfs_result
  changed_when: create_cephfs_result.rc == 1
  failed_when: create_cephfs_result.rc != 0 and
               ('already exist' not in create_cephfs_result.stderr)

- name: Combine proxmox_master and proxmox_nodes into a single list for CephFS
  ansible.builtin.set_fact:
    all_proxmox_nodes: "{{ groups['proxmox_master'] | default([]) + groups['proxmox_nodes'] | default([]) }}"
  when: is_master

- name: Gather IP addresses of all_proxmox_nodes
  ansible.builtin.set_fact:
    all_proxmox_nodes_ips: >-
      {{ all_proxmox_nodes | map('extract', hostvars, ['ansible_host']) | list }}
  when: is_master

- name: Check if CephFS storage is already defined in Proxmox
  ansible.builtin.shell: |
    grep -q '^cephfs:' /etc/pve/storage.cfg && echo "exists" || echo "not_exists"
  register: cephfs_check_result
  changed_when: false

- name: Check if CephFS mount path exists
  ansible.builtin.stat:
    path: /mnt/pve/cephfs
  register: cephfs_path_check
  changed_when: false

- name: Configure storage drive CephFS in Proxmox using node IPs
  ansible.builtin.command: >
    pvesm add cephfs cephfs
    --monhost {{ all_proxmox_nodes_ips | join(',') }}
    --path /mnt/pve/cephfs
    --content vztmpl,iso,backup,snippets
    --username admin
    --fs-name cephfs
  when: >
    is_master and
    cephfs_check_result.stdout == "not_exists" and
    not cephfs_path_check.stat.exists
  register: cephfs_add_result
  failed_when: >
    cephfs_add_result.rc != 0 and
    ('already defined' not in cephfs_add_result.stderr.lower())
  changed_when: >
    cephfs_add_result.rc == 0 and
    ('already defined' not in cephfs_add_result.stderr.lower())
