---
- name: Combine proxmox_master and proxmox_nodes into a single list for CephFS
  ansible.builtin.set_fact:
    all_proxmox_nodes: "{{ groups['proxmox_master'] | default([]) + groups['proxmox_nodes'] | default([]) }}"
  when: is_master

##########################################################################
# 1. PVE Nag-Buster Installation Tasks
##########################################################################
- name: Check if pve-nag-buster script is installed
  ansible.builtin.stat:
    path: /usr/share/pve-nag-buster.sh
  register: pve_nag_buster_file

- name: Download the PVE nag-buster install script
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/foundObjects/pve-nag-buster/master/install.sh"
    dest: "/tmp/install.sh"
    mode: '0755'
  when: not pve_nag_buster_file.stat.exists

- name: Run the nag-buster install script
  ansible.builtin.command: "/tmp/install.sh"
  args:
    chdir: "/tmp"
    creates: /usr/share/pve-nag-buster.sh
  when: not pve_nag_buster_file.stat.exists

##########################################################################
# 2. Proxmox Cluster Setup Tasks
##########################################################################
- name: Check if node is part of an existing Proxmox cluster
  ansible.builtin.command: pvecm status
  register: pvecm_status
  ignore_errors: true
  changed_when: false

- name: Set fact if node is not in a cluster
  ansible.builtin.set_fact:
    not_in_cluster: "{{ 'does not exist' in pvecm_status.stderr }}"

- name: Create cluster on the master node if not in a cluster
  ansible.builtin.command: "pvecm create {{ cluster_name }}"
  when:
    - is_master
    - not_in_cluster
  register: create_cluster
  changed_when: create_cluster.rc == 0

- name: Use expect to provide password and confirm SSH connection for pvecm add
  ansible.builtin.expect:
    command: "pvecm add {{ master_ip }}"
    responses:
      "^Please enter superuser \\(root\\) password for '.*':\\s*": "{{ proxmox_password }}"
      "Are you sure you want to continue connecting \\(yes/no\\)\\?": "yes"
    timeout: 200
  when:
    - "'proxmox_nodes' in group_names or 'proxmox_master' in group_names"
    - not is_master
    - not_in_cluster

- name: Reboot node after Proxmox configuration if not in cluster
  ansible.builtin.reboot:
    reboot_timeout: 300
  when: not_in_cluster

- name: Ensure ifupdown2 is installed (for networking reload)
  ansible.builtin.apt:
    name: ifupdown2
    state: present
  when: ansible_os_family == "Debian"

- name: Deploy /etc/network/interfaces from template
  ansible.builtin.template:
    src: ../files/interfaces.j2
    dest: /etc/network/interfaces
    mode: '0755'
    backup: true
  notify:
    - Restart networking

##########################################################################
# Proxmox HA Group Creation by Checking /etc/pve/ha/groups.cfg
##########################################################################
- name: Check if /etc/pve/ha/groups.cfg exists
  ansible.builtin.stat:
    path: /etc/pve/ha/groups.cfg
  register: ha_groups_file
  changed_when: false
  failed_when: false
  when: is_master

- name: Check if 'proxmox_ha_group' is already defined in groups.cfg
  ansible.builtin.shell: "grep -q '^group: proxmox_ha_group$' /etc/pve/ha/groups.cfg"
  register: group_check
  changed_when: false
  failed_when: false
  when:
    - is_master
    - ha_groups_file.stat.exists

- name: Create a Proxmox HA group if missing
  ansible.builtin.command: "ha-manager groupadd proxmox_ha_group --nodes {{ all_proxmox_nodes | join(',') }}"
  when:
    - is_master
    - ha_groups_file.stat.exists
    - group_check.rc != 0
  register: create_ha_group
  changed_when: create_ha_group.rc == 0


##########################################################################
# Additional Proxmox Tasks: Enable NFS Storages and Daily Backups
##########################################################################
- name: Check if NFS storage block for /mnt/data is already defined in Proxmox
  ansible.builtin.shell: |
    grep -q '^nfs: nfs_data' /etc/pve/storage.cfg && echo "exists" || echo "not_exists"
  register: nfs_data_check_result
  changed_when: false
  when: is_master

- name: Configure NFS storage for /mnt/data in Proxmox
  ansible.builtin.command: >
    pvesm add nfs nfs_data
    --server {{ nfs_server_ip }}
    --export /mnt/data
    --options vers=3
    --content backup,rootdir
  when: is_master and nfs_data_check_result.stdout == "not_exists"
  register: nfs_data_add_result
  failed_when: >
    nfs_data_add_result.rc != 0 and
    ('already defined' not in nfs_data_add_result.stderr.lower())
  changed_when: >
    nfs_data_add_result.rc == 0 and
    ('already defined' not in nfs_data_add_result.stderr.lower())

- name: Confirm NFS storage block for /mnt/data exists in /etc/pve/storage.cfg
  ansible.builtin.shell: |
    grep -q '^nfs: nfs_data' /etc/pve/storage.cfg && echo "found" || echo "not found"
  register: nfs_data_confirm
  changed_when: false
  when: is_master

- name: Check if NFS storage block for /mnt/plex is already defined in Proxmox
  ansible.builtin.shell: |
    grep -q '^nfs: nfs_plex' /etc/pve/storage.cfg && echo "exists" || echo "not_exists"
  register: nfs_plex_check_result
  changed_when: false
  when: is_master

- name: Configure NFS storage for /mnt/plex in Proxmox
  ansible.builtin.command: >
    pvesm add nfs nfs_plex
    --server {{ nfs_server_ip }}
    --export /mnt/plex
    --options vers=3
    --content rootdir
  when: is_master and nfs_plex_check_result.stdout == "not_exists"
  register: nfs_plex_add_result
  failed_when: >
    nfs_plex_add_result.rc != 0 and
    ('already defined' not in nfs_plex_add_result.stderr.lower())
  changed_when: >
    nfs_plex_add_result.rc == 0 and
    ('already defined' not in nfs_plex_add_result.stderr.lower())

- name: Confirm NFS storage block for /mnt/plex exists in /etc/pve/storage.cfg
  ansible.builtin.shell: |
    grep -q '^nfs: nfs_plex' /etc/pve/storage.cfg && echo "found" || echo "not found"
  register: nfs_plex_confirm
  changed_when: false
  when: is_master


##########################################################################
# HA Pool Configuration for VMs
##########################################################################
- name: Check if Proxmox pool "vm_backup_pool" exists
  ansible.builtin.shell: "grep -q '^pool: vm_backup_pool$' /etc/pve/pools.cfg"
  register: pool_check
  changed_when: false
  failed_when: false
  when: is_master

- name: Create Proxmox pool "vm_backup_pool" for VM backups if not exists
  ansible.builtin.command: >
    pvesh create /pools --poolid vm_backup_pool --comment "Pool for VM backups"
  when: is_master and pool_check.rc != 0
  register: create_pool
  failed_when: create_pool.rc != 0 and ("already exists" not in (create_pool.stderr | string))
  changed_when: create_pool.rc == 0

##########################################################################
# VM Backup Job
##########################################################################
- name: Get current Proxmox backup jobs
  ansible.builtin.command: "pvesh get /cluster/backup/jobs"
  register: current_backup_jobs
  changed_when: false
  failed_when: false
  when: is_master

- name: Create Proxmox backup job for pool "vm_backup_pool" if not exists
  ansible.builtin.command: >
    pvesh create /cluster/backup --schedule '*-*-* 11:00:00' --pool vm_backup_pool --storage nfs_data --maxfiles 2 --enabled 1
  when: is_master and ("vm_backup_pool" not in current_backup_jobs.stdout)
  register: create_backup_job
  changed_when: create_backup_job.rc == 0
